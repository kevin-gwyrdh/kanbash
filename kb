#!/usr/bin/env bash

# gwyrdh drew additional inspiration from 
# kanban bash https://github.com/coderofsalvation/kanban.bash
# clikan https://github.com/kitplummer/clikan

# gwyrdh - make portable with config in pwd in hidden folder .kb
# this does mean that the user has to call kanbash from the the working directory
# edit back to original if this doesn't suite
# I use this  script from kanban.bash which opens kanbash when the directory with .kb config is entered
# cd(){
#  builtin cd ${1:+"$@"} && [[ -d ./.kb ]] &&  ~/Bin/kb
#}

# CONFIG=~/.config/kanbash/config
CONFIG=$PWD/.kb/config

# Load config. Expects 'nc', 'ip', 'dn' and 'board'
load_config() {
    if [[ -f "$CONFIG" ]]; then
        source "$CONFIG"
    else
        printf '%s\n' "error: no config file found"
        usage
        exit
    fi
}

usage() {
    help_str="
kanbash - a kanban board in bash

$0 [options]

usage:
    add  COL STR         adds string to column
    list COL             lists enumerated tasks
    move COL NUM COL     moves from column to column, by number
    all                  list all columns; default output when run without args

configuration:
    kanbash expects a config file at $HOME/.config/kanbash/config
    example config:
        
        # not completed
        nc="nc"
        
        # in progress
        ip="ip"
        
        # done
        dn="done"

        board=/home/icy/code/kanbash/test

    board can also be specified by setting the KB_BOARD environment
    variable; use absolute paths (/home/user/foo/bar).
    "
    printf '%s\n' "$help_str"
}

# gwyrdh added to load colour shortcuts

C0="\033[0m"
# text reset

C1="\033[37;1m"
# white bold

C2="\033[91;1m"
# red bold

C3="\033[91;5m"
# red flash

C4="\033[92;1m"
# green bold

C5="\033[96m"
# cyan

check_col() {
    col="$1"
    [[ ! -f "$board/$col" ]] && {
        printf '%s\n' "error: no such column $col"
        exit
    }
}

add() {
    col="$1"
    check_col "$col"
    shift
    task="$@"
    printf '%s\n' "$task" >> "$board/$col"
}

list() {
    col="$1"
    check_col "$col"
    mapfile -t f < "$board/$col"
    count=0
    printf '%b\n' "\e[1m${col^^}\e[0m"
    for line in "${f[@]}"; do
        printf '%b\n' "\e[36m$(( count++ ))\e[0m  $line"
    done
    printf '\n'
}

move() {
    [[ "$#" -ne 3 ]] && {
        printf '%s\n' "error: invalid number of arguments"
        usage
        exit
    }

    fcol="$1"
    n="$2"
    tcol="$3"

    check_col "$fcol"
    check_col "$tcol"

    mapfile -t f < "$board/$fcol"
    chosen="${f["$n"]}"

    printf '%s\n' "$chosen" >> "$board/$tcol"

    unset -v f["$n"]
    # TODO: inelegant, but whatever.
    rm "$board/$fcol"
    [[ "${#f[@]}" -eq 0 ]] && touch "$board/$fcol"
    for line in "${f[@]}"; do
         printf '%s\n' "$line" >> "$board/$fcol"
    done
}

init() {

    [[ -d "$board" ]] && {
        printf '%s\n' "error: $board already exists"
        exit
    } 
    
    mkdir -p "$board"
    touch "$board"/{"$nc","$ip","$dn"}
    printf '%s\n' "kanbash: initialized at $board"
}

all() {
    # The three columns.
    for c in "$nc" "$ip" "$dn"; do
        list "$c"
    done
}

main() {
    load_config

    # If $KB_BOARD is set
    [[ -v "$KB_BOARD" ]] && {
        board="$KB_BOARD"
    }

    [[ -z "$1" ]] && {
        all
    }

    case "$1" in
        i*)
            init
            ;;
        al*)
            all
            ;;
        a*)
            shift
            add "$@"
            ;;
        l*)
            shift
            list "$@"
            ;;
        m*)
            shift
            move "$@"
            ;;

        h)
            usage
            ;;
    esac
}

main "$@"
